buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


version = '1.0'
group = 'com.Meli4.lumos' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'lumos'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: '1.16.5'

    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.35'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation 'org.reflections:reflections:0.10.2'
    implementation group: 'org.apache.commons', name: 'commons-vfs2', version: '2.0'

    implementation fg.deobf("curse.maven:blood-magic-224791:3870899")
    implementation fg.deobf("curse.maven:ars-omega-597007:3923720")
    implementation fg.deobf("curse.maven:eidolon-429625:3157832")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:4300733")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.103')
    implementation "curse.maven:citadel2-331936:3441030"
    implementation fg.deobf("curse.maven:alexs-mobs-426558:3467280")
    implementation fg.deobf("curse.maven:extrabotany-299086:3926035")
    implementation fg.deobf('vazkii.botania:Botania:1.16.4-413')
    implementation fg.deobf("curse.maven:advent-of-ascension-nevermine-311054:4431558")
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:3441117")
    implementation fg.deobf("curse.maven:wyrmroost-340333:3173775")
    implementation fg.deobf("curse.maven:farmers-delight-398521:3765350")
    //implementation fg.deobf("curse.maven:apotheosis-313970:3750840")
    implementation fg.deobf("curse.maven:apotheosis-313970:3438930")
    //implementation fileTree(dir: 'lib', include: '*.jar')
    implementation fg.deobf("curse.maven:placebo-283644:3437009")
    implementation fg.deobf("curse.maven:atum-59621:3760512")
    implementation fg.deobf("curse.maven:enigmatic-legacy-336184:3758580")
    implementation fg.deobf("curse.maven:malum-484064:3374475")
    implementation fg.deobf("curse.maven:mana-and-artifice-406360:3651870")
    implementation fg.deobf("curse.maven:the-undergarden-379849:3477594")
    implementation fg.deobf("curse.maven:forbidden-arcanus-309858:3646126")
    implementation fg.deobf("curse.maven:the-abyss-chapter-ii-440647:3776944")
    implementation fg.deobf("curse.maven:valhelsia-core-416935:3592369")


    //implementation fg.deobf("curse.maven:occultism-361026:3861416")
    //implementation fg.deobf("curse.maven:occultism-361026:3835700")

    implementation fg.deobf("curse.maven:occultism-361026:3453087")



    runtimeOnly fg.deobf("curse.maven:hwyla-253449:3033593")

    //implementation fg.deobf("curse.maven:ars-mage-fight-688594:4756991")



    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")



    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    add sourceSets.main, "lumos.refmap.json"

    config "lumos.mixins.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
repositories {
    mavenCentral()
    maven {
        url "https://maven.blamejared.com"
    }
    maven { url "https://maven.tehnut.info" }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://maven.theillusivec4.top/"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    flatDir {
        dir 'lib'
    }
}
